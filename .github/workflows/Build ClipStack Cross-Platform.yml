name: Build and Release ClipStack

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: "3.10"
  APP_NAME: "clipstack"

jobs:
  build:
    name: Build ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            os-name: windows
            executable: "clipstack.exe"
            archive-cmd: 'Compress-Archive -Path "release/*" -DestinationPath "clipstack-windows-${{ github.run_number }}.zip"'
            artifact-path: "clipstack-windows-*.zip"
          - os: ubuntu-20.04  # Use specific version for consistency
            os-name: linux
            executable: "clipstack"
            archive-cmd: 'tar -czf "clipstack-linux-${{ github.run_number }}.tar.gz" -C release .'
            artifact-path: "clipstack-linux-*.tar.gz"
          - os: macos-12  # Use specific version for consistency
            os-name: macos
            executable: "clipstack"
            archive-cmd: 'tar -czf "clipstack-macos-${{ github.run_number }}.tar.gz" -C release .'
            artifact-path: "clipstack-macos-*.tar.gz"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version detection

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: matrix.os-name == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-tk \
          python3-dev \
          build-essential \
          libasound2-dev \
          libportaudio2 \
          libportaudiocpp0 \
          portaudio19-dev \
          xvfb \
          libgtk-3-dev \
          libglib2.0-dev

    - name: Install system dependencies (macOS)
      if: matrix.os-name == 'macos'
      run: |
        brew install portaudio tcl-tk
        echo 'export PATH="/usr/local/opt/tcl-tk/bin:$PATH"' >> $GITHUB_ENV

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install from requirements file
        if [ -f "ClipStack/requirements.txt" ]; then
          pip install -r ClipStack/requirements.txt
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          # Fallback to individual packages
          pip install customtkinter>=5.2.0 pyperclip>=1.8.2 keyboard>=0.13.5 CTkMessagebox>=2.5 Pillow>=9.0.0
        fi
        pip install pyinstaller>=6.0.0  # Use latest PyInstaller
      shell: bash

    - name: Verify dependencies
      run: |
        python -c "import customtkinter; print(f'CustomTkinter: {customtkinter.__version__}')"
        python -c "import pyperclip; print('Pyperclip: OK')"
        python -c "import keyboard; print('Keyboard: OK')"
        python -c "import CTkMessagebox; print('CTkMessagebox: OK')"
        python -c "import tkinter; print('Tkinter: OK')"

    - name: Get version info
      id: version
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        else
          VERSION="dev-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        fi
        echo "Building version: $VERSION"

    - name: Create PyInstaller spec
      shell: bash
      run: |
        cd ClipStack
        cat > ${APP_NAME}.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        from pathlib import Path

        block_cipher = None

        # Get version from environment
        version = os.environ.get('BUILD_VERSION', 'dev')

        # Platform-specific settings
        if sys.platform == 'win32':
            console = False
            icon = None  # Add .ico path here if available
        elif sys.platform == 'darwin':
            console = False
            icon = None  # Add .icns path here if available  
        else:
            console = False
            icon = None  # Add .png path here if available

        a = Analysis(
            ['main.py'],  # Script is in the current directory (ClipStack/)
            pathex=[],
            binaries=[],
            datas=[
                # Add any data files here if needed
            ],
            hiddenimports=[
                'customtkinter',
                'tkinter',
                'tkinter.ttk',
                'tkinter.messagebox',
                'tkinter.filedialog',
                'PIL',
                'PIL._tkinter_finder',
                'PIL.Image',
                'PIL.ImageTk',
                'pyperclip',
                'keyboard',
                'CTkMessagebox',
                'json',
                'threading',
                'datetime',
                'uuid',
                'signal',
                'atexit',
                'sys',
                'os',
                'time',
                'platform',
                'typing'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[
                'matplotlib',
                'numpy',
                'pandas',
                'scipy',
                'pytest',
                'IPython',
                'jupyter',
                'notebook'
            ],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='clipstack',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=console,
            disable_windowed_traceback=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            icon=icon,
            version_file=None
        )

        # Create macOS app bundle
        if sys.platform == 'darwin':
            app = BUNDLE(
                exe,
                name='ClipStack.app',
                icon=icon,
                bundle_identifier='com.clipstack.app',
                version=version,
                info_plist={
                    'CFBundleName': 'ClipStack',
                    'CFBundleDisplayName': 'ClipStack',
                    'CFBundleIdentifier': 'com.clipstack.app',
                    'CFBundleVersion': version,
                    'CFBundleShortVersionString': version,
                    'NSPrincipalClass': 'NSApplication',
                    'NSAppleScriptEnabled': False,
                    'CFBundleDocumentTypes': [],
                    'NSHighResolutionCapable': True,
                    'LSUIElement': False,  # Show in dock
                    'NSRequiresAquaSystemAppearance': False,
                    'LSMinimumSystemVersion': '10.13.0'
                }
            )
        EOF

    - name: Build executable
      env:
        BUILD_VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "Building ClipStack ${{ steps.version.outputs.version }} for ${{ matrix.os-name }}"
        cd ClipStack
        pyinstaller clipstack.spec --clean --noconfirm --log-level INFO

    - name: Verify build (Windows)
      if: matrix.os-name == 'windows'
      run: |
        if (Test-Path "ClipStack\dist\clipstack.exe") {
          Write-Host "✅ Executable created successfully"
          $fileInfo = Get-Item "ClipStack\dist\clipstack.exe"
          Write-Host "Size: $($fileInfo.Length / 1MB) MB"
          Write-Host "Created: $($fileInfo.CreationTime)"
        } else {
          Write-Error "❌ Executable not found"
          Get-ChildItem ClipStack\dist -Recurse
          exit 1
        }

    - name: Verify build (Unix)
      if: matrix.os-name != 'windows'
      run: |
        if [ -f "ClipStack/dist/clipstack" ] || [ -d "ClipStack/dist/ClipStack.app" ]; then
          echo "✅ Executable created successfully"
          ls -la ClipStack/dist/
          if [ -f "ClipStack/dist/clipstack" ]; then
            file ClipStack/dist/clipstack
            ls -lh ClipStack/dist/clipstack
          fi
        else
          echo "❌ Executable not found"
          find ClipStack/dist -type f 2>/dev/null || echo "dist directory empty or missing"
          exit 1
        fi

    - name: Create release package
      shell: bash
      run: |
        mkdir -p release
        
        # Copy executable(s)
        if [ "${{ matrix.os-name }}" = "windows" ]; then
          cp ClipStack/dist/clipstack.exe release/
        elif [ "${{ matrix.os-name }}" = "macos" ] && [ -d "ClipStack/dist/ClipStack.app" ]; then
          cp -r ClipStack/dist/ClipStack.app release/
        else
          cp ClipStack/dist/clipstack release/
          chmod +x release/clipstack
        fi
        
        # Create README
        cat > release/README.md << EOF
        # ClipStack ${{ steps.version.outputs.version }} - ${{ matrix.os-name }}
        
        A minimalist clipboard manager for developers and power users.
        
        ## Installation & Usage
        
        ### ${{ matrix.os-name }}
        EOF
        
        if [ "${{ matrix.os-name }}" = "windows" ]; then
          cat >> release/README.md << 'EOF'
        
        1. Extract the archive
        2. Double-click `clipstack.exe` to run
        
        **Note:** Windows may show a security warning for unsigned executables. Click "More info" → "Run anyway"
        EOF
        elif [ "${{ matrix.os-name }}" = "macos" ]; then
          cat >> release/README.md << 'EOF'
        
        1. Extract the archive
        2. If you have `ClipStack.app`: Double-click to run
        3. If you have the binary: Run `./clipstack` in terminal
        
        **Note:** macOS may block the app initially. Go to System Preferences → Security & Privacy → Allow anyway
        EOF
        else
          cat >> release/README.md << 'EOF'
        
        1. Extract the archive
        2. Make executable: `chmod +x clipstack`
        3. Run: `./clipstack`
        
        **Requirements:**
        - X11 display server
        - GTK3 (usually pre-installed)
        EOF
        fi
        
        cat >> release/README.md << EOF
        
        ## Features
        
        - 📋 Automatically tracks your last 50 text copies
        - ⌨️ Global hotkey: **Ctrl+Alt+C** to show/hide
        - 📌 Pin important clipboard items
        - 💾 Export history as TXT or JSON
        - 🎨 System theme support (Dark/Light/Auto)
        - 🔍 Right-click context menu for quick actions
        
        ## Support
        
        - Version: ${{ steps.version.outputs.version }}
        - Platform: ${{ matrix.os-name }}
        - Built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Repository: https://github.com/\${{ github.repository }}
        
        Report issues: https://github.com/\${{ github.repository }}/issues
        EOF

    - name: Create archive
      shell: bash
      run: |
        if [ "${{ matrix.os-name }}" = "windows" ]; then
          powershell -command "${{ matrix.archive-cmd }}"
        else
          ${{ matrix.archive-cmd }}
        fi
        ls -la clipstack-${{ matrix.os-name }}-*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: clipstack-${{ matrix.os-name }}-${{ github.run_number }}
        path: ${{ matrix.artifact-path }}
        retention-days: 30
        compression-level: 6

    - name: Upload executable for debugging
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-${{ matrix.os-name }}-${{ github.run_number }}
        path: |
          ClipStack/dist/
          ClipStack/build/
          *.spec
        retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: clipstack-*-${{ github.run_number }}

    - name: Organize release files
      run: |
        mkdir -p release
        find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
          cp "$file" release/
        done
        ls -la release/

    - name: Calculate checksums
      run: |
        cd release
        sha256sum * > checksums.sha256
        cat checksums.sha256

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        make_latest: true
        body: |
          ## ClipStack ${{ github.ref_name }}
          
          A minimalist clipboard manager built with Python and CustomTkinter.
          
          ### 🎯 Features
          - Automatically tracks last 50 clipboard items
          - Global hotkey: **Ctrl+Alt+C** 
          - Pin important items
          - Export as TXT/JSON
          - Cross-platform support
          
          ### 📦 Downloads
          Choose the appropriate version for your operating system:
          
          - **Windows**: `clipstack-windows-*.zip`
          - **Linux**: `clipstack-linux-*.tar.gz` 
          - **macOS**: `clipstack-macos-*.tar.gz`
          
          ### 🔐 Verification
          SHA256 checksums are provided in `checksums.sha256`
          
          ### 🐛 Issues
          Report bugs at: https://github.com/${{ github.repository }}/issues
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    name: Test Installation
    needs: build
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        pattern: clipstack-*-${{ github.run_number }}
        path: artifacts

    - name: Test installation
      shell: bash
      run: |
        echo "Testing ClipStack installation on ${{ matrix.os }}"
        find artifacts -name "*.zip" -o -name "*.tar.gz" | head -1 | while read archive; do
          echo "Found archive: $archive"
          # Basic extraction test - full GUI testing would require X11/display setup
          if [[ "$archive" == *.zip ]]; then
            unzip -t "$archive" || exit 1
          else
            tar -tzf "$archive" || exit 1
          fi
          echo "✅ Archive extraction test passed"
        done